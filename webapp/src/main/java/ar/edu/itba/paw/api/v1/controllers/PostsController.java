package ar.edu.itba.paw.api.v1.controllers;import ar.edu.itba.paw.api.v1.dto.PostDTO;import ar.edu.itba.paw.api.v1.parameters.PostParams;import ar.edu.itba.paw.helpers.PaginationHelper;import ar.edu.itba.paw.interfaces.PostService;import ar.edu.itba.paw.interfaces.UserService;import ar.edu.itba.paw.models.Post;import ar.edu.itba.paw.utils.Pair;import ar.edu.itba.paw.validators.PostValidator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import javax.ws.rs.*;import javax.ws.rs.core.GenericEntity;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;import java.util.List;@Path("api/v1/posts")@Componentpublic class PostsController extends ApiController {  @Autowired  private PostService postService;  @Autowired  private UserService userService;  @GET  @Path("/{id}")  public Response show(@PathParam("id") final long id) {    final Post post = postService.find(id);    if (post != null) {      return ok(new PostDTO(post));    } else {      return notFound();    }  }  @GET  public Response index(@PathParam("page") Integer pageParam) {    final List<Post> allPosts = postService.all(PaginationHelper.INSTANCE.page(pageParam), PaginationHelper.DEFAULT_PER_PAGE);    GenericEntity<List<PostDTO>> list = new GenericEntity<List<PostDTO>>(PostDTO.fromList(allPosts)) {};    return ok(list);  }  @POST  @Consumes(MediaType.APPLICATION_JSON)  public Response create(final PostParams input) {    Pair<Boolean, String> validation = PostValidator.validate(input);    if (!validation.getLeft()) {      return badRequest(validation.getRight());    }    // TODO: do this when authorization is implemented    // User user = userService.find();    // if (user == null) {    //   return notFound(USER_DOES_NOT_EXIST);    // }    // Post post = postService.create(input.title, input.description, user);    // return created(post);    return created(null);  }  @PUT  @Path("/{id}")  public Response edit(@PathParam("id") final long id, final PostParams input) {    // TODO: change this to /me when authorization is set    Post post = postService.update(id, input.title, input.description);    return ok(new PostDTO(post));  }  @DELETE  @Path("/{id}")  public Response destroy(@PathParam("id") final long id) {    // TODO: Only if the logged user is the owner    return ok();  }}